//ActivationFunction activationFunction = new Sigmoid();
        //Network neuNet = new Network("network.txt", 1.0, activationFunction, 0.3, 0.9);
        //ArrayList<Integer> neuronsQuantities = new ArrayList<Integer>();
        //neuronsQuantities.add(1); neuronsQuantities.add(10); neuronsQuantities.add(1);
        //Network neuNet = new Network(neuronsQuantities, -0.5, 0.5, 1.0, activationFunction, 0.01, 0.005, 50000);
        //neuronsQuantities.add(4); neuronsQuantities.add(10); neuronsQuantities.add(3);
        //Network neuNet = new Network(neuronsQuantities, -0.5, 0.5, 1.0, activationFunction, 0.1, 0.6, 10000);   
        //neuNet.saveNetwork("before.txt");
        //ArrayList<Double> input = new ArrayList<Double>();
        //input.add(1.0); input.add(0.0); input.add(0.0); input.add(0.0);
        //neuNet.setInputFirst(input);
        //neuNet.computeOutput();
        //System.out.println(neuNet.getNetworkOutput());
        //neuNet.inputFromFile3("in.txt", "in.txt");
        
//        ArrayList<Integer> neuronsQuantities;
//        for(int i = 0; i < 18; i++) {
//            System.out.println(0.05+(i*0.05));
//            for(int j = 1; j < 5; j++) {                
//                neuronsQuantities = new ArrayList<Integer>();
//                neuronsQuantities.add(j); neuronsQuantities.add(10); neuronsQuantities.add(3);
//                System.out.println(j);
//                Network neuNet = new Network(neuronsQuantities, -0.5, 0.5, 1.0, activationFunction, (0.05+((double)i*0.05)), 0.3, 20000);
//                neuNet.inputFromFile2("classification_train.txt", "classification_test.txt");
//            }
//        }
        
        //neuNet.inputFromFile2("classification_train.txt", "classification_test.txt");
        
//            for(int i = 0; i < 6/2; i++) {
//                for(int j = 0; j < 6/2-i; j++) {
//                    System.out.println("" + (i+1) + " " + (j+2+i));
//                }
//            }

        
        //neuNet.inputFromFile1("approximation_train_1.txt", "approximation_test.txt");
        //for(int i = 0; i < neuNet.getNetworkInput().size(); i++) {
        //    System.out.println(neuNet.getNetworkInput().get(i));
        //}
        //neuNet.mixNetworkInput();
        //System.out.println();
        //for(int i = 0; i < neuNet.getNetworkInput().size(); i++) {
        //    System.out.println(neuNet.getNetworkInput().get(i));
        //}
        //neuNet.propagation("errors.txt");
        //neuNet.saveNetwork("after.txt");        
//        neuNet.check();
//        System.out.println();
//        System.out.println("-------------------------");
//        System.out.println();
        //neuNet.inputFromFile2("classification_test.txt");
        //neuNet.inputFromFile1("approximation_test.txt");
        //neuNet.check("out.txt");

java neuralnetwork.App -V 3 in.txt in.txt -F network.txt -f sigm -b 1.0 -n 0.3 -a 0.9 -e 2500 -s after.txt -o errors.txt
java neuralnetwork.App -V 3 in.txt in.txt -N 2 4 2 4 -r -0.5 0.5 -f sigm -b 1.0 -n 0.3 -a 0.9 -e 2500 -s after.txt -o errors.txt
java neuralnetwork.App -V 1 approximation_train_1.txt approximation_test.txt -N 2 1 8 1 -r -0.5 0.5 -f sigm -b 1.0 -n 0.01 -a 0.005 -e 20000 -o errors.txt -t tested.txt
java neuralnetwork.App -V 2 classification_train.txt classification_test.txt -N 2 2 8 3 -r -0.5 0.5 -f sigm -b 1.0 -n 0.1 -a 0.6 -e 10000 -o errors.txt
java neuralnetwork.App -N 2 2 8 3 -r -0.5 0.5 -V 2 classification_train.txt classification_test.txt -a 0.6 -e 10000 -b 1.0 -f sigm -o errors.txt -n 0.1